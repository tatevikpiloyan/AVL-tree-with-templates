#include <iostream>
#include <initializer_list>

template <typename T>
class AVL
{
public:
  struct Node
  {
    T data;
    Node* left;
    Node* right;
    Node* parent;
    int balfact;
  };
    
private:
  Node* root;

public:
  AVL() : root(nullptr) {}
  
  AVL(std::initializer_list<T> elem)
  {
    for (auto init : elem)
    {
      this->insert(init);
    }
  }
  
  AVL(const AVL& node)
  {
    root = deep_copy(node.root);
  }
  
  AVL(AVL&& node)
  {
    data = node.data;
    left = node.left;
    right = node.right;
    balfact = node.balfact;
    node.left = nullptr;
    node.right = nullptr;
  }
  
  ~AVL()
  {
    delete left;
    delete right;
  }
  
private:
  Node* deep_copy(Node* node_ptr)
  {
    Node* ptr = new Node;
    if (node_ptr == nullptr)
    {
      return nullptr;
    }
    ptr->data = node_ptr->data;
    ptr->left = new Node(deep_copy(node_ptr->left));
    ptr->right = new Node(deep_copy(node_ptr->right));
  }
};
