#include <iostream>
#include <initializer_list>

template <typename T>
class AVL
{
public:
  struct Node
  {
    T data;
    Node* left;
    Node* right;
    Node* parent;
    int balfact;
  };
  
  Node* root;

public:
  AVL() : root(nullptr) {}
  
  AVL(std::initializer_list<T> elem)
  {
    for (auto init : elem)
    {
      insert(root, init);
    }
  }
  
  AVL(const AVL& node)
  {
    root = deep_copy(node.root);
  }
  
  AVL(AVL&& node)
  {
    root = node.root;
    node.root = nullptr;
  }
  
  ~AVL()
  {
    if(root != nullptr)
    {
      clear(root);
    }
  }
  
private:
  Node* deep_copy(Node* node_ptr)
  {
    Node* ptr = nullptr;
    if (node_ptr == nullptr)
    {
      return ptr;
    }
    ptr = new Node();
    ptr->data = node_ptr->data;
    ptr->left = deep_copy(node_ptr->left);
    ptr->right = deep_copy(node_ptr->right);
    return ptr;
  }

public:
  void clear(Node* ptr)
  {
    if (ptr == nullptr)
    {
      return;
    }
    clear(ptr->left);
    clear(ptr->right);
    delete ptr;
    ptr = nullptr;
   }
};
